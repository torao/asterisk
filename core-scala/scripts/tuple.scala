import java.io._
import java.nio.charset.StandardCharsets

val dir = new File("./src/main/generated")
val MaxFields = 21
val Package = "io.asterisque.core"

for(i <- 2 to MaxFields) {
  val src = new File(dir, Package.replace('.', '/') + s"/Tuple$i.java")
  src.getParentFile.mkdirs()
  val out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(src), StandardCharsets.UTF_8))
  out.println(s"package io.asterisque.core;")
  out.println()
  out.println(s"import javax.annotation.Nullable;")
  out.println(s"import java.util.Objects;")
  out.println()
  out.println("// This class is auto-generated by script/tuple.scala, DON'T EDIT")
  out.println(s"public final class Tuple$i<${(1 to i).map(x => s"T$x").mkString(", ")}> extends Tuple {")
  for(j <- 1 to i) {
    out.println(s"  public final T$j _$j;")
  }
  out.println()
  out.println(s"  Tuple$i(${(1 to i).map(x => s"T$x t$x").mkString(", ")}) {")
  out.println(s"    super(new Object[]{${(1 to i).map(x => s"t$x").mkString(", ")}});")
  for(j <- 1 to i) {
    out.println(s"    this._$j = t$j;")
  }
  out.println(s"  }")
  out.println()
  out.println(s"  @Override")
  out.println(s"  public int hashCode() {")
  out.println(s"    return Objects.hash(${(1 to i).map(x => s"this._$x").mkString(", ")});")
  out.println(s"  }")
  out.println()
  out.println(s"  @Override")
  out.println(s"  public boolean equals(@Nullable Object other) {")
  out.println(s"    if(!(other instanceof Tuple$i)) return false;")
  out.println(s"    final Tuple$i tuple = (Tuple$i)other;")
  out.println(s"    return ${(1 to i).map(x => s"Objects.equals(this._$x, tuple._$x)").mkString(" && ")};")
  out.println(s"  }")
  out.println(s"}")
  out.close()
  System.err.println(src)
}

// Tuple に実装するメソッド
System.out.println("  // The following methods are auto-generated by script/tuple.scala, DON'T EDIT")
System.out.println()
for(i <- 2 to MaxFields) {
  val types = (1 to i).map(x => s"T$x").mkString(", ")
  val params = (1 to i).map(x => s"T$x t$x").mkString(", ")
  val pass = (1 to i).map(x => s"t$x").mkString(", ")
  System.out.println(s"  @Nonnull")
  System.out.println(s"  public static <$types> Tuple$i<$types> of($params) {")
  System.out.println(s"    return new Tuple$i<>($pass);")
  System.out.println("  }")
  System.out.println()
}
System.out.println(s"  public static Tuple of(@Nonnull Object[] values) throws IllegalArgumentException {")
System.out.println(s"    switch(values.length){")
System.out.println(s"    case 0:")
System.out.println(s"      return ofUnit();")
for(i <- 2 to MaxFields) {
  System.out.println(s"    case $i:")
  System.out.println(s"      return of(${(0 until i).map(x => s"values[$x]").mkString(", ")});")
}
System.out.println(s"    default:")
System.out.println("      throw new IllegalArgumentException(\"unsupported tuple length: \" + values.length);")
System.out.println(s"    }")
System.out.println("  }")
System.out.println()
